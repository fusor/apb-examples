#############################################################################
# Provision hello-world
# This role executes much of the needed functionality to provision an
# application using an Ansible Playbook Bundle.  Included in the comments
# below are some sample resources for getting started deploying an application
# to OpenShift.
#############################################################################


#############################################################################
# An OpenShift Origin project is a Kubernetes namespace with additional
# annotations. It provides a mechanism to scope resources in a cluster and
# are required to create any additional resources.
# https://docs.openshift.org/latest/architecture/core_concepts/projects_and_users.html#projects
#############################################################################
- name: create project if it doesn't exist
  openshift_v1_project:
    name: '{{ namespace }}'


#############################################################################
# An OpenShift Origin deployment configuration provides a replication
# controller, spins up pods, and also provides the ability to transition from
# one deployment of an image to a new one.
# https://docs.openshift.org/latest/architecture/core_concepts/deployments.html#deployments-and-deployment-configurations
#############################################################################
- name: create deployment config
  openshift_v1_deployment_config:
    name: hello-world
    namespace: '{{ namespace }}'
    labels:
      app: hello-world
      service: hello-world
    replicas: 1
    selector:
      app: hello-world
      service: hello-world
    spec_template_metadata_labels:
      app: hello-world
      service: hello-world
    containers:
    - env:
      image: docker.io/ansibleplaybookbundle/hello-world:latest
      name: hello-world
      ports:
      - container_port: 80
        protocol: TCP


#############################################################################
# A Kubernetes service serves as an internal load balancer.  It identifies a
# set of replicated pods in order to proxy the connections it receives to them.
# https://docs.openshift.org/latest/architecture/core_concepts/pods_and_services.html#services
#############################################################################
- name: create hello-world service
  k8s_v1_service:
    name: hello-world
    namespace: '{{ namespace }}'
    labels:
      app: hello-world
      service: hello-world
    selector:
      app: hello-world
      service: hello-world
    ports:
      - name: web
        port: 80
        target_port: 80


#############################################################################
# An OpenShift Origin route exposes a service at a host name, so that external
# clients can reach it by name. Each route consists of a name, a service
# selector, and an optional security configuration.
# https://docs.openshift.org/latest/architecture/core_concepts/routes.html
#############################################################################
- name: create hello-world route
  openshift_v1_route:
    name: hello-world
    namespace: '{{ namespace }}'
    spec_port_target_port: web
    labels:
      app: hello-world
      service: hello-world
    to_name: hello-world
